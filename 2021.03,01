#define _CRT_SECURE_NO_WARNINGS
#include<stdio.h>
#include<string.h>
#include<assert.h>
#include<errno.h>
#include<stdlib.h>

//int main()
//{
//	char buf[1024] = { 0 };
//	//fgets(buf, 1024, stdin);
//	//fputs(buf, stdout);
//	
//	gets(buf);
//	puts(buf);
//
//	return 0;
//}

//struct S
//{
//	int n;
//	float score;
//	char arr[10];
//};
//
//int main()
//{
//	struct S s = { 100,3.14f,"hello" };
//	FILE* pf = fopen("test.txt", "w");
//	if (pf == NULL)
//	{
//		printf("%s\n", strerror(errno));
//		return 0;
//	}
//
//	fprintf(pf, "%d %f %s", s.n, s.score, s.arr);
//	printf("%d %f %s\n", s.n, s.score, s.arr);
//
//	fclose(pf);
//	pf = NULL;
//	return 0;
//}


//动态顺序表
//typedef int SLDataType;
//
//typedef struct SeqList
//{
//	SLDataType* a;
//	int size;//有效数据的个数
//	int capacity;//容量
//}SL, SeqList;
//
////初始化
//void SeqListInit(SL* ps)
//{
//	/*s.size = 0;
//	s.a = NULL;
//	s.capacity = 0;*/
//
//	ps->a = (SLDataType*)malloc(sizeof(SLDataType) * 4);
//	if (ps->a == NULL)
//	{
//		printf("申请内存失败\n");
//		exit(-1);
//	}
//	ps->size = 0;
//	ps->capacity = 4;
//}
////尾插尾删   头插头删
//void SeqListPushBack(SL* ps, SLDataType x);
//void SeqListPrint(SL* ps);
//void SeqListPopBack(SL* ps);
//void SeqListPushFront(SL* ps, SLDataType x);
//void SeqListPopFront(SL* ps);
//void SeqListInsert(SL* ps, int pos, SLDataType x);
//void SeqListErase(SL* ps, int pos);
//int SeqListFind(SL* ps, SLDataType x);
////扩容接口
//void panduan(SL* ps)
//{
//	if (ps->size >= ps->capacity)
//	{
//		ps->capacity *= 2;
//		ps->a = (SLDataType*)realloc(ps->a, sizeof(SLDataType) * ps->capacity);
//		if (ps->a == NULL)
//		{
//			printf("增容失败\n");
//			exit(-1);
//		}
//
//	}
//}
//
//
//void text1()
//{
//	SeqList s;
//	SeqListInit(&s);
//	SeqListPushBack(&s, 1);
//	SeqListPushBack(&s, 2);
//	SeqListPushBack(&s, 3);
//	SeqListPushBack(&s, 4);
//	SeqListPrint(&s);
//
//	SeqListPopBack(&s);
//	SeqListPrint(&s);
//
//	SeqListPushFront(&s, -1);
//	SeqListPushFront(&s, -2);
//	SeqListPrint(&s);
//
//	SeqListPopFront(&s);
//	SeqListPopFront(&s);
//	SeqListPrint(&s);
//
//	SeqListInsert(&s, 1, 9);
//	SeqListPrint(&s);
//
//	SeqListErase(&s, 2);
//	SeqListPrint(&s);
//
//}
//
//int main()
//{
//	text1();
//	return 0;
//}
//
////尾增
//void SeqListPushBack(SL* ps, SLDataType x)
//{
//	assert(ps);
//	//先判断容量是否满了，满了需要增加容量
//	panduan(ps);
//	ps->a[ps->size] = x;
//	ps->size++;
//
//}
////打印函数
//void SeqListPrint(SL* ps)
//{
//	assert(ps);
//	for (int i = 0; i < ps->size; i++)
//	{
//		printf("%d ", ps->a[i]);
//	}
//	printf("\n");
//}
//
////尾删
//void SeqListPopBack(SL* ps)
//{
//	assert(ps);
//
//	//ps->a[ps->size - 1] = 0;
//
//	ps->size--;
//
//}
//
////首插
//void SeqListPushFront(SL* ps, SLDataType x)
//{
//	assert(ps);
//	panduan(&ps);
//	int end = ps->size - 1;
//	while (end >= 0)
//	{
//		ps->a[end + 1] = ps->a[end];
//		end--;
//	}
//	ps->a[0] = x;
//	ps->size++;
//
//}
////首删
//void SeqListPopFront(SL* ps)
//{
//	assert(ps);
//
//	int front = 0;
//	while (front < ps->size - 1)
//	{
//		ps->a[front] = ps->a[front + 1];
//		front++;
//	}
//	ps->size--;
//
//}
////任意位置插数字
//void SeqListInsert(SL* ps, int pos, SLDataType x)
//{
//	assert(ps);
//	assert(pos < ps->size&&pos>=0);
//	panduan(ps);
//
//	int i = pos;
//	for (i = ps->size - 1; i >= pos; i--)
//	{
//		ps->a[i + 1] = ps->a[i];
//	}
//	ps->a[pos] = x;
//	ps->size++;
//
//}
//
////任意位置删数字
//void SeqListErase(SL* ps, int pos)
//{
//	assert(ps);
//	assert(pos<ps->size&&pos >= 0);
//	int i = pos;
//	//1 9 2 3
//	for (i = pos; i < ps->size - 1; i++)
//	{
//		ps->a[i] = ps->a[i + 1];
//	}
//	ps->size--;
//}
//
//int SeqListFind(SL* ps, SLDataType x)
//{
//	assert(ps);
//
//	int i = 0;
//	while (i < ps->size)
//	{
//		if (ps->a[i] == x)
//		{
//			return i;
//		}
//		i++;
//	}
//	return -1;
//}

//void merge(int* nums1, int nums1Size, int m, int* nums2, int nums2Size, int n) {
//    int p1 = m - 1;
//    int p2 = n - 1;
//    int p = m + n - 1;
//    int cur = 0;
//    while (p1 >= 0 || p2 >= 0)
//    {
//        if (p1 == -1)
//            cur = nums2[p2--];
//        else if (p2 == -1)
//            cur = nums1[p1--];
//        else if (nums1[p1] > nums2[p2])
//            cur = nums1[p1--];
//        else
//            cur = nums2[p2--];
//        nums1[p--] = cur;
//    }
//
//}
//
//int main()
//{
//    int nums1[] = { 1,2,3,0,0,0 };
//    int nums2[] = { 2,5,6 };
//    int m = 3, n = 3;
//    int nums1Size = 6, nums2Size = 3;
//    merge(&nums1, 6, 3, &nums2, 3, 3);
//    for (int i = 0; i < n + m; i++)
//    {
//        printf("%d ", nums1[i]);
//    }
//
//    return 0;
//}
