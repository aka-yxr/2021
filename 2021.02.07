//#include<stdio.h>
//
//struct stu
//{
//	char name[20];
//	int age;
//};
//
//void Swap(char* buf1, char* buf2, int width)
//{
//	int i = 0;
//	for (i = 0; i < width; i++)
//	{
//		char tmp = *buf1;
//		*buf1 = *buf2;
//		*buf2 = tmp;
//		buf1++;
//		buf2++;
//	}
//
//}
//
//void my_sort(void* base, int size, int width,int(*cmp)(void* e1,void* e2))
//{
//	int i = 0, j = 0;
//	for (i = 0; i < size-1; i++)
//	{
//		for (j = 0; j < size - 1 - i; j++)
//		{
//			//两个元素比较
//			if (cmp((char*)base+j*width, (char*)base + (j + 1) * width > 0))
//			{
//				//交换
//				Swap((char*)base + j * width, (char*)base + (j + 1) * width, width);
//			}
//		}
//	}
//}
//
//int cmp1(const void* a, const void* b)
//{
//	int* c = (int*)a;
//	int* d = (int*)b;
//	return *c - *d;
//}
//
//int main()
//{
//	int arr[10] = { 2,3,4,5,6,0,9,8,7,1 };
//	struct stu s[3] = { {"zhangsan",30},{"lisi",10},{"wangwu",20} };
//
//	int size = sizeof(arr) / sizeof(arr[0]);
//	//qsort();
//	//第一个参数：待排序数组的首元素地址
//	//第二个参数：待排序数组的元素个数
//	//第三个参数：待排序数组的每个元素的大小-单位是字节
//	//第四个参数：是函数指针，比较两个元素的所用函数的地址-这个函数由使用者自己实现
//	//            函数指针的两个参数是： 带比较的两个元素的地址
//
//	my_sort(arr, size, sizeof(arr[0]), cmp1);
//
//	for (int i = 0; i < size; i++)
//	{
//		printf("%d ", arr[i]);
//	}
//	return 0;
//}


//LeetBook
//#include<stdio.h>
//
//int checkPossibility(int* nums, int numsSize)
//{
//    int count = 0, i;
//    //两个数肯定可以
//    if (numsSize < 3)
//        return 1;
//
//    if (nums[0] > nums[1])//第一个数大于第二个数的时候，肯定要改变第一个数
//    {
//        nums[0] = nums[1];
//        count++;
//    }
//
//    for (i = 1; i < numsSize - 1; i++)
//    {
//        int right = nums[i + 1];
//        if (nums[i] > right)//i从1开始，依次和它后面一个数比较，如果比他后面一个数大，则要改变
//        {
//            count++;
//            if (count > 1)
//            {
//                return -1;
//            }
//            int left = nums[i - 1];
//            if (left > right)//把i前面后面两个数进行比较，如果第i个数前面的大于后面的
//            {
//                nums[i + 1] = nums[i];
//            }
//  3 4 2 3.
//  3 >2   -->3  4  4  3
//            else 
//            {
//                nums[i] = left;
//            }
//        }
//    }
//    return 1;
//}
//
//int main()
//{
//	int nums[4] = { 3,4,2,3 };
//	int numsSize = 4;
//	int flag = checkPossibility(nums, numsSize);
//	if (flag)
//		printf("true\n");
//	else
//		printf("false\n");
//	return 0;
//}

#include <stdio.h>
#include <string.h>
//
//int main()
//{
//	//二维数组
//	int a[3][4] = { 0 };
//	//printf("%p\n", &a[0][0]);
//	//printf("%p\n", a[0] + 1);
//	//printf("%p\n", a + 1);
//	//printf("%p\n", &a[0] + 1);
//
//	printf("%d\n", sizeof(a));//48
//	printf("%d\n", sizeof(a[0][0]));//4
//	printf("%d\n", sizeof(a[0])); //16 a[0]相当于第一行做为一维数组的数组名，
//	//sizeof(arr[0])把数组名单独放在sizeof()内，计算的是第一行的大小
//
//	printf("%d\n", sizeof(a[0] + 1));//4 - a[0]是第一行的数组名，数组名此时是首元素的地址，a[0]其实就是第一行第一个元素的地址
//	//所以 a[0]+1 就是第一行第二个元素的地址- 地址大小是4/8个字节
//
//	printf("%d\n", sizeof(*(a[0] + 1)));//4- *(a[0] + 1)) 是第一行第二个元素，大小是4个字节
//	printf("%d\n", sizeof(a + 1)); //4     //a是二维数组的数组名，没有sizeof(a)，也没有&(a),所以a是首元素地址
//	//而把二维数组看成一维数组时，二维数组的首元素是他的第一行，a就是第一行（首元素）的地址
//	//a+1就是第二行的地址
//
//	printf("%d\n", sizeof(*(a + 1)));//16, sizeof(a[1]) 计算第二行的大小,单位是字节
//	printf("%d\n", sizeof(&a[0] + 1));//4, 第二行的地址
//	printf("%d\n", sizeof(*(&a[0] + 1)));//16 计算第二行的大小，单位是字节
//	printf("%d\n", sizeof(*a));//a是首元素地址-第一行的地址，*a就是第一行，sizeof(*a)就是计算第一行的大小
//	printf("%d\n", sizeof(a[3]));//16
//
//	//char* p = "abcdef";
//	//
//	//printf("%d\n", strlen(p));//6
//	//printf("%d\n", strlen(p + 1));//5
//	////printf("%d\n", strlen(*p));//err
//	////printf("%d\n", strlen(p[0]));//err
//	//printf("%d\n", strlen(&p));//随机值
//	//printf("%d\n", strlen(&p + 1));//随机值
//	//printf("%d\n", strlen(&p[0] + 1));//5
//
//	//printf("%d\n", sizeof(p));//4/8 - 计算指针变量p的大小
//	//printf("%d\n", sizeof(p + 1));//4/8 - p+1 得到的是字符b的地址
//	//printf("%d\n", sizeof(*p));//1 *p 就是字符串的第一个字符 - 'a'
//	//printf("%d\n", sizeof(p[0]));//1  int arr[10];  arr[0] == *(arr+0)    p[0] == *(p+0) == 'a'
//	//printf("%d\n", sizeof(&p));//4/8  地址
//	//printf("%d\n", sizeof(&p + 1));//4/8 地址 
//	//printf("%d\n", sizeof(&p[0] + 1));//4/8 地址
//
//
//	//char arr[] = {'a', 'b', 'c', 'd', 'e', 'f'};
//
//	//char arr[] = "abcdef";
//
//	//printf("%d\n", strlen(arr));//6
//	//printf("%d\n", strlen(arr + 0));//6
//	////printf("%d\n", strlen(*arr));//err 
//	////printf("%d\n", strlen(arr[1]));//err
//	//printf("%d\n", strlen(&arr));//6 &arr - 数组的地址-数组指针 char(*p)[7] = &arr;
//	//printf("%d\n", strlen(&arr + 1));//随机值
//	//printf("%d\n", strlen(&arr[0] + 1));//5
//
//
//	//printf("%d\n", sizeof(arr));//sizeof(arr)计算的数组的大小，单位是字节：7
//	//printf("%d\n", sizeof(arr + 0));//4/8 计算的是地址的大小-arr + 0是首元素的地址
//	//printf("%d\n", sizeof(*arr));   //1 *arr 是首元素，sizeof(*arr)计算首元素的大小
//	//printf("%d\n", sizeof(arr[1])); //1 arr[1]是第二个元素，sizeof(arr[1])计算的是第二个元素的大小
//	//printf("%d\n", sizeof(&arr));   //4/8 &arr虽然是数组的地址，但也是地址，所以是4/8个字节
//	//printf("%d\n", sizeof(&arr + 1));//4/8 &arr+1是跳过整个数组后的地址，但也是地址
//	//printf("%d\n", sizeof(&arr[0] + 1));//4/8 &arr[0]+1 第二个元素的地址
//
//	return 0;
//}
