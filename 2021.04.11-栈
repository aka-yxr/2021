//#define _CRT_SECURE_NO_WARNINGS
//#include<stdio.h>
//#include<string.h>
//#include<assert.h>
//#include<errno.h>
//#include<stdlib.h>
//#include<stdbool.h>
//#include<math.h>
//
////顺序栈
//#define MAXSIZE 1000
//#define ERROR -1
//#define OK 1
//typedef int SElemType;
//
////typedef struct {
////	SElemType data[MAXSIZE];
////	int top; //栈顶
////}SqStack;
////
//////进栈
////int Push(SqStack* S, SElemType e)
////{
////	if (S->top == MAXSIZE - 1)//栈满
////		return ERROR;
////	S->top++;
////	S->data[S->top] = e;
////	return OK;
////}
////
//////出栈
////int Pop(SqStack* S, SElemType* e)
////{
////	if (S->top == -1)//空栈
////		return ERROR;
////	*e = S->data[S->top];
////	S->top--;
////	return OK;
////}
//
//////两栈合一
//////其中一个以0为栈底，另一个以MAXSIZE为栈底。
////typedef struct {
////	SElemType data[MAXSIZE];
////	int top1;
////	int top2;
////}SqDoubleStack;
////
//////进栈
////int Push(SqDoubleStack* S, SElemType e, int stackNumber)
////{
////	if (S->top1 + 1 == S->top2)//栈满
////		return ERROR;
////	if (stackNumber == 1)
////		S->data[++S->top1] = e;
////	else if (stackNumber == 2)
////		S->data[++S->top2] = e;
////	return OK;
////}
////int Pop(SqDoubleStack* S, SElemType* e, int stackNumber)
////{
////	if (stackNumber == 1)
////	{
////		if (S->top1 == -1)
////			return ERROR;
////		*e = S->data[S->top1--];
////	}
////	else if (stackNumber == 2)
////	{
////		if (S->top2 == MAXSIZE)
////			return ERROR;
////		*e = S->data[S->top2--];
////	}
////	return OK;
////}
//
////链栈
////typedef struct StackNode
////{
////	SElemType data;
////	struct StackNode* next;
////}StackNode,*LinkStackPtr;
////
////typedef struct LinkStack
////{
////	LinkStackPtr top;
////	int count;
////}LinkStack;
////
//////进栈
////int Push(LinkStack* S, SElemType e)
////{
////	LinkStackPtr s = NULL;
////	s=(LinkStackPtr)malloc(sizeof(StackNode));
////	if (s)
////	{
////		s->data = e;
////		s->next = S->top;
////		S->top = s;
////		S->count++;
////	}
////	return OK;
////}
////
//////出栈
////int Pop(LinkStack* S, SElemType* e)
////{
////	LinkStackPtr p;
////	/*if (StackEmpty(*S))
////		return ERROR;*/
////	*e = S->top->data;
////	p = S->top;
////	S->top = S->top->next;
////	free(p);
////	S->count--;
////	return OK;
////}
//
