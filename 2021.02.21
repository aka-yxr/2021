#define _CRT_SECURE_NO_WARNINGS
#include<stdio.h>
#include<string.h>
#include<assert.h>



//int main()
//{
//	int arr[] = { 1,2,3,4,5 };
//	int arr2[] = { 1,2,5,4,3 };
//	//num--字节数
//	int ret = memcmp(arr, arr2, 8);
//	printf("%d\n", ret);
//
//	return 0;
//}


//memset函数多用于把数组清空成0；
//int main()
//{
//	char arr[10] = { 0 };
//	for (int i = 0; i < 10; i++)
//		printf("%c ", arr[i]);
//	printf("\n");
//	memset(arr, '#', 10);
//	for (int i = 0; i < 10; i++)
//		printf("%c ", arr[i]);
//	printf("\n");
//	int arr1[10] = { 1,2,3,4,5,6,7,8,9,10 };
//	for (int i = 0; i < 10; i++)
//		printf("%d ", arr1[i]);
//	printf("\n");
//	memset(arr1, 0,40);
//	for (int i = 0; i < 10; i++)
//		printf("%d ", arr1[i]);
//
//	return 0;
//}

//自定义类型--结构体
//结构体的自引用
//结构体内存对齐
//结构体传参
//结构体实现位段（位段的填充&可移植性）

//struct stu
//{
//	char name[20];
//	char tele[12];
//	char sex[10];
//	int age;
//};
//
////匿名结构类型-只能用一次.
//struct
//{
//	int a;
//	char b;
//	float c;
//}x;
//
//int main()
//{
//	struct stu s1[5] = { 0 };
//
//	return 0;
//}


//结构体的自引用。
//结构体内不能包含自己类型的变量

//struct Node
//{
//	int data;
//	struct Node* next;
//};

//struct T
//{
//	double weight;
//	short age;
//};
//
//struct stu
//{
//	char c;
//	struct T st;
//	int a;
//	double d;
//	char arr[20];
//};
//
//int main()
//{
//	struct stu s = { 'c',{55.6,30},100,3.14,"hello world!" };
//
//	printf("%c %d %lf %s\n", s.c, s.a, s.d, s.arr);
//	printf("%lf\n", s.st.weight);
//
//	return 0;
//}

//结构体内存对齐

//struct S1
//{
//	char c1;
//	int a;
//	char c2;
//
//};
//
//struct S2
//{
//	char c1;
//	char c2;
//	int a;
//};
//
//int main()
//{
//	struct S1 s1 = { 0 };
//	printf("%d\n", sizeof(s1));
//	struct S2 s2 = { 0 };
//	printf("%d\n", sizeof(s2));
//
//	return 0;
//}
