//#define _CRT_SECURE_NO_WARNINGS
//#include<stdio.h>
//#include<string.h>
//#include<assert.h>
//#include<errno.h>
//#include<stdlib.h>
//#include<stdbool.h>
//#include<math.h>
//
////DFS-深度优先搜索
//const int maxn = 30;
//int n = 0, V = 0, maxValue = 0;
//int w[maxn], c[maxn];
////index为当前物品的编号
////void DFS(int index, int sumW, int sumC)
////{
////	if (index == n)
////	{
////		if (sumW <= V && sumC > maxValue)
////			maxValue = sumC;
////		return;
////	}
////	//岔道口
////	DFS(index + 1, sumW, sumC);//选第index件物品
////	DFS(index + 1, sumW + w[index], c[index]);//不选第index件物品
////	
////}
//
////优化
//void DFS(int index, int sumW, int sumC)
//{
//	if (index == n)
//		return;
//	//加入第index物品后不超重才能继续
//	DFS(index + 1, sumW, sumC);
//	if (sumW + w[index] <= V)
//	{
//		if (sumC + c[index] > maxValue)
//			maxValue = sumC + c[index];
//		DFS(index + 1, sumW + w[index], sumC + c[index]);
//	}
//
//}
//
//int main()
//{
//	int p = 0;
//	scanf("%d%d", &n, &V);
//	for (int i = 0; i < n; i++)
//	{
//		scanf("%d", &w[i]);
//	}
//	for (int i = 0; i < n; i++)
//	{
//		scanf("%d", &c[i]);
//	}
//	DFS(0, 0, 0);
//	printf("%d\n", maxValue);
//	return 0;
//}

#include<cstdio>
#include<vector>
#include<queue>
using namespace std;

//const int maxn = 30;
//int n, k, x, maxSumSq = -1, A[maxn];
//vector<int>temp, ans;
//void DFS(int index, int nowK, int sum, int sumSqu)
//{
//	if (nowK == k && sum == x)
//	{
//		if (sumSqu > maxSumSq)
//		{
//			maxSumSq = sumSqu;
//			ans = temp;
//		}
//		return;
//	}
//	if (index == n || nowK > k || sum > x)
//		return;
//	temp.push_back(A[index]);
//	DFS(index + 1, nowK + 1, sum + A[index], sumSqu + A[index] * A[index]);
//	temp.pop_back();
//	DFS(index + 1, nowK, sum, sumSqu);
//
//}


//BFS
//const int maxn=100;
//struct node
//{
//	int x, y;
//}Node;
//int n, m;
//int matrix[maxn][maxn];
//bool inq[maxn][maxn] = { false };
//int X[4] = { 0,0,1,-1 };
//int Y[4] = { 1,-1,0,0 };
//
//bool judge(int x, int y)
//{
//	if (x >= n || x < 0 || y >= m || y < 0)
//		return false;
//	if (matrix[x][y] == 0 || inq[x][y] == true)
//		return false;
//	return true;
//}
//
//void BFS(int x,int y)
//{
//	queue<node>Q;
//	Node.x = x;
//	Node.y = y;
//	Q.push(Node);
//	inq[x][y] = true;
//	while (!Q.empty())
//	{
//		node top = Q.front();
//		Q.pop();
//		for (int i = 0; i < 4; i++)
//		{
//			int newX = top.x + X[i];
//			int newY = top.y + Y[i];
//			if (judge(newX, newY))
//			{
//				Node.x = newX;
//				Node.y = newY;
//				Q.push(Node);
//				inq[newX][newY] = true;
//			}
//		}
//	}
//}
//
//int main()
//{
//	scanf("%d%d", &n, &m);
//	for (int x = 0; x < n; x++)
//		for (int y = 0; y < m; y++)
//			scanf("%d", &matrix[x][y]);
//	int ans = 0;
//	for (int x = 0; x < n; x++)
//	{
//		for (int y = 0; y < m; y++)
//		{
//			if (matrix[x][y] == 1 && inq[x][y] == false)
//			{
//				ans++;
//				BFS(x, y);
//			}
//		}
//	}
//	printf("%d\n", ans);
//	return 0;
//}
