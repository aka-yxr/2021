#define _CRT_SECURE_NO_WARNINGS
#include<stdio.h>
#include<string.h>
#include<stdlib.h>
#define MAX_NAME 20
#define MAX_SEX 5
#define MAX_TELE 12
#define MAX_ADDR 20
#define DEFINE_SZ 3

enum Enum
{
	EXIT,//0
	ADD,//1
	DEL,//2
	SEARCH,//3
	MODIFY,//4
	SHOW,//5
	SORT//6
};

struct People
{
	char name[MAX_NAME];
	int age;
	char sex[MAX_SEX];
	char tele[MAX_TELE];
	char addr[MAX_ADDR];
};

struct Contact
{
	int size;//记录当前通讯录人数
	int all;//记录通讯录当前最大容量。
	struct People* date;
};

//初始化通讯录
void InitContact(struct Contact* ps);

//添加联系人
void AddContact(struct Contact* ps);

//打印函数
void ShowContact(const struct Contact* ps);

//删除函数
void DelContact(struct Contact* ps);

//查找函数
void SearchContact(const struct Contact* ps);

void ModifyContact(struct Contact* ps);

void SortContact(struct Contact* ps);

void Destroy(struct Contact* ps);

void menu()
{
	printf("******************************\n");
	printf("****1.add       2.del    *****\n");
	printf("****3.search    4.modify *****\n");
	printf("****5.show      6.sort   *****\n");
	printf("****0.exit               *****\n");
	printf("******************************\n");

}

int main()
{
	int input = 0;
	int size = 0;
	struct Contact con;
	//初始化通讯录 
	InitContact(&con);
	do
	{
		menu();
		printf("Please choose yours:> ");
		scanf_s("%d", &input);
		switch (input)
		{
		case ADD:AddContact(&con);
			break;
		case DEL:DelContact(&con);
			break;
		case SEARCH:SearchContact(&con);
			break;
		case MODIFY:ModifyContact(&con);
			break;
		case SHOW:ShowContact(&con);
			break;
		case SORT:SortContact(&con);
			break;
		case EXIT:printf("退出\n");
			Destroy(&con);
			break;
		default:printf("选择错误\n");
			break;
		}

	} while (input);

	return 0;
}

void InitContact(struct Contact* ps)
{
	ps->date =(struct People*) malloc(DEFINE_SZ * sizeof(struct People));
	if (ps->date == NULL)
		return;
	ps->size = 0;
	ps->all = DEFINE_SZ;
}

void CheckTXL(struct Contact* ps)
{
	if (ps->size == ps->all)
	{
		//增容
		struct People* ptr = realloc(ps->date, (ps->all + 2) * sizeof(struct People));
		if (ptr != NULL)
		{
			ps->date = ptr;
			ps->all += 2;
			printf("增容成功\n");
		}
		else
			printf("增容失败\n");
	}

}

//添加通讯录联系人
void AddContact(struct Contact* ps)
{

	CheckTXL(ps);
	//1.若空间满了增加空间
	//2.若没有满，增加数据
	printf("请输入名字：>\n");
	scanf("%s", ps->date[ps->size].name);//用scanf更合适
	printf("请输入年龄：>\n");
	scanf_s("%d", &(ps->date[ps->size].age));
	printf("请输入性别：>\n");
	scanf("%s", ps->date[ps->size].sex);
	printf("请输入电话：>\n");
	scanf("%s", ps->date[ps->size].tele);
	printf("请输入地址：>\n");
	scanf("%s", ps->date[ps->size].addr);
	ps->size++;
	printf("添加成功\n");

}

//显示联系人
void ShowContact(const struct Contact* ps)
{
	if (ps->size == 0)
	{
		printf("通讯录为空\n");
	}
	else
	{
		int i = 0;
		printf("%20s\t%4s\t%5s\t%12s\t%20s\n", "名字", "年龄", "性别", "电话", "地址");

		for (i = 0; i < ps->size; i++)
		{
			printf("%-20s\t%-4d\t%-5s\t%-12s\t%-20s\n",
				ps->date[i].name,
				ps->date[i].age,
				ps->date[i].sex,
				ps->date[i].tele,
				ps->date[i].addr);
		}
	}

}

//查询函数
static int FindByName(const struct Contact* ps, char name[MAX_NAME])
{
	int i = 0;
	for (i = 0; i < ps->size; i++)
	{
		if (strcmp(ps->date[i].name, name) == 0)
			return i;
	}
	return -1;
}

//删除联系人
void DelContact(struct Contact* ps)
{
	char name[MAX_NAME];
	printf("请输入删除人的名字:>");
	gets(name);
	//1.查找要删除的人的位置
	//找到了返回名字，找不到返回-1
	int pos = FindByName(ps, name);

	//2.删除
	if (pos == -1)
		printf("要删除的人不存在\n");
	else
	{
		int j = 0;
		for (j = pos; j < ps->size - 1; j++)
		{
			ps->date[j] = ps->date[j + 1];
		}
		ps->size--;
		printf("删除成功\n");
	}

}

//查询联系人
void SearchContact(const struct Contact* ps)
{
	char name[MAX_NAME];
	printf("请输入查询人的名字\n");
	gets(name);
	//查找联系人
	int pos = FindByName(ps, name);
	if (pos == -1)
		printf("查询人不存在\n");
	else
	{
		printf("%20s\t%4s\t%5s\t%12s\t%20s\n", "名字", "年龄", "性别", "电话", "地址");
		printf("%-20s\t%-4d\t%-5s\t%-12s\t%-20s\n",
			ps->date[pos].name,
			ps->date[pos].age,
			ps->date[pos].sex,
			ps->date[pos].tele,
			ps->date[pos].addr);
	}

}


//修改
void ModifyContact(struct Contact* ps)
{
	char name[MAX_NAME];
	printf("请输入修改人的名字:>");
	gets(name);
	int pos = FindByName(ps, name);
	if (pos == -1)
		printf("修改人不存在\n");
	else
	{
		printf("请输入名字：>\n");
		scanf("%s", ps->date[pos].name);
		printf("请输入年龄：>");
		scanf_s("%d", &(ps->date[pos].age));
		printf("请输入性别：>");
		scanf("%s", ps->date[pos].sex);
		printf("请输入电话：>");
		scanf("%s", ps->date[pos].tele);
		printf("请输入地址：>");
		scanf("%s", ps->date[pos].addr);

		printf("修改完成\n");

	}
}

static int cmp(const void* s1, const void* s2)
{
	struct Contact* a = (struct Contact*)s1;
	struct Contact* b = (struct Contact*)s2;
	return a->date->age - b->date->age;
}

////排序
void SortContact(const struct Contact* ps)
{
	qsort(ps->date, ps->size, sizeof(ps->date), cmp);
}

void Destroy(struct Contact* ps)
{
	free(ps->date);
	ps->date = NULL;
}
