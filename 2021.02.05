//#include<stdio.h>
//
//void print(int* p, int size)
//{
//	int i = 0;
//	for (i = 0; i < size; i++)
//	{
//		printf("%d ", *(p + i));
//		printf("%d\n", p[i]);
//	}
//
//}
//
//int main()
//{
//	int arr[10] = { 1,2,3,4,5,6,7,8,9,10 };
//	int* p = arr;
//	int size = sizeof(arr) / sizeof(arr[0]);
//
//	print(p, size);
//	return 0;
//}

//#include<stdio.h>
//
//int Add(int x, int y)
//{
//	int z = 0;
//	z = x + y;
//	return z;
//}
//int main()
//{
//	int a = 10;
//	int b = 20;
//	int arr[10] = { 0 };
//
//	//int(*p)[10] = &arr;//数组指针
//	//printf("%d\n", Add(a, b));
//
//	//&函数名 和 函数名 都是函数的地址
//	//printf("%p \n", &Add);
//	//printf("%p \n", Add);
//
//	int(*p)(int, int) = Add;
//	scanf_s("%d %d", &a, &b);
//
//	printf(" %d ", (*p)(a, b));
//
//	return 0;
//}

//#include<stdio.h>
//
//int Add(int x, int y)
//{
//	return x + y;
//}
//int Sub(int x, int y)
//{
//	return x - y;
//}
//int Mul(int x, int y)
//{
//	return x * y;
//}
//int Div(int x, int y)
//{
//	return x / y;
//}
//
//int main()
//{
//	int* arr[5];//指针数组
//	//需要一个数组，可以存放四个函数的地址--函数指针的数组
//	int (*pa)(int, int) = Add;
//	//函数指针数组
//	int (*parr[4])(int, int) = { Add,Sub,Mul,Div };
//	int i = 0;
//	for (i; i < 4; i++)
//	{
//		printf("%d\n", parr[i](2, 3));
//	}
//
//	return 0;
//}

//char* (*pf) (char* ,const char* );
//char* (*pf[arr4]) (char*,const char*);


//#include <stdio.h>
//
//const int maxn = 10010;
//
//int a[maxn], b[maxn];
//
//int m, total, s, t, aptotal, apm, aps, apt, k;
//int n;
//int ck()
//{
//    int p, r;
//    if (total > 5)
//        return 1;
//    p = s;
//    r = t;
//    for (int q = 0; q < m; q++)
//    {
//        p = p * 10 + s;
//    }
//
//    for (int q = 0; q < total - m; q++)
//        p = p * 10;
//    for (int q = 1; q < total - m; q++)
//        r = r * 10 + t;
//    return p + r > n;
//}
//int main()
//{
//    while (scanf("%d", &n), n)
//    {
//        printf("%d: ", n);
//        if (n == 1) {
//            printf("10");
//            continue;
//        }
//        a[0] = 1;
//        b[0] = 1;
//        for (int i = 1; i < 9999; i++)
//            a[i] = (a[i - 1] * 10 + 1) % n;
//        for (int i = 1; i < 999; i++)
//            b[i] = b[i - 1] * 10 % n;
//        for (total = 1, aps = 0; total < 9999; total++) {
//            k = 0;
//            if ((n % 10 == 0 || n % 25 == 0) && total > 11)
//                k = total - 11;
//            for (m = k; m < total; m++)
//                for (s = 1; s < 10; s++)
//                    for (t = 0; t < (n % 10 ? 10 : 1); t++)
//                        if (t != s && (((long long)a[m]) * b[total - m] * s + a[total - m - 1] * t) % n == 0 && ck() &&
//                            (!aps || s < aps))
//                        {
//                            aptotal = total;
//                            apm = m;
//                            aps = s;
//                            apt = t;
//                        }
//            if (aps)
//                break;
//        }
//        for (int x = 0; x < apm + 1; x++)
//            printf("%d", aps);
//        for (int x = 0; x < aptotal - apm; x++)
//            printf("%d", apt);
//        printf("\n");
//    }
//    return 0;
//}
