00000000 00000000 00000000 00001001

//#include<stdio.h>
//int main()
//{
//
//	unsigned int i;
//	//无符号数，没有负值
//	//死循环
//	for (i = 9; i >= 0; i--)
//		printf("%u\n", i);
//	return 0;
//}

//#include<stdio.h>
//#include<string.h>
//
//int main()
//{
//	char a[1000];
//	int i;
//	for (i = 0; i < 1000; i++)
//		a[i] = -1 - i;
//	printf("%d", strlen(a));
//	//char 类型的数值范围-128到127
//	//-128之后变成127 . 。 。 。3 2 1 0
//	//strlen 遇到0就结束了，0之前刚好有128+127=225个数字
//	return 0;
//}

//#include<stdio.h>
//
//int main()
//{
//	unsigned char i = 0;
//	//无符号char 0-255 255+1=0；
//	for (i = 0; i <= 255; i++)
//		printf("Hello World\n");
//	return 0;
//}

//#include<stdio.h>
//
//int main()
//{
//	int n = 9;
//	float* pfloat = (float*)&n;
//	printf("n的值为：%d\n", n);
//	printf("*pfloat的值为：%f\n", *pfloat);
//	//整型和浮点型在存储时有所区别
//	*pfloat = 9.0;
//	printf("n的值为：%d\n", n);
//	printf("*pfloat的值为：%f\n", *pfloat);
//	return 0;
//}


//#include<stdio.h>
//
//int main()
//{
//	int a = 16;
//	// >>  --右移操作符
//	// 移动的是二进制位
//	//00000000000000000000000000010000
//	//0|0000000000000000000000000001000|0
//	//左边补原符号位             //右边丢弃
//	int b = a >> 1;
//
//	printf("%d\n", b);
//	//程序运行结果 打印出 数字 8
//	return 0;
//}


//#include<stdio.h>
//
//int main()
//{
//	int a = -1;
//	//
//	//整数的二进制表示有，原码，反码，补码
//	//储存到内存的是补码
//	//10000000000000000000000000000001  --原码
//	//11111111111111111111111111111110  --反码
//	//11111111111111111111111111111111  --补码
//	//1|1111111111111111111111111111111|1
//
//	int b = a >> 1;
//
//	printf("%d\n", b);
//    //打印出来的结果仍是-1
//	return 0;
//}


//#include<stdio.h>
//
//int main()
//{
//    int a, b, flag = 0;//flag为了零多项式
//
//    scanf("%d %d", &a, &b);
//
//    if (b != 0)
//    {
//        printf("%d %d", a * b, b - 1);
//        flag = 1;
//    }
//    while (~scanf("%d %d", &a, &b))//可用于多组输入
//        //while(scanf(%d %d,&a,&b)!=EOF) 也可以用于多组输入 
//    {
//        if (b != 0)
//        {
//            printf(" %d %d", a * b, b - 1);
//            flag = 1;
//        }
//    }
//
//    if (flag == 0)
//        printf("0 0");
//
//    return 0;
//}

//#include<stdio.h>
//
//int main()
//{
//	//&  按2进制位与   补码运算
//	int a = 3;
//	int b = 5;
//	int c = a & b;
//	//00000000000000000000000000000011
//	//00000000000000000000000000000101
//	//00000000000000000000000000000001
//	//只有两个同时为1 才为1，其他为0
//
//	//所以 c=1；
//	printf("%d\n", c);
//	//结果就是1
//
//	//| 按位或
//	int d = a | b;
//	//00000000000000000000000000000011
//	//00000000000000000000000000000101
//	//00000000000000000000000000000111
//	//只有两个同时为0才为0，有一个1就是1
//
//	//所以d=7
//	printf("%d \n", d);
//	//结果就是7；
//
//	// ^ 按位异或  对应的二进制位，相同为0，相异为1.
//	int x = a ^ b;
//	//00000000000000000000000000000011
//	//00000000000000000000000000000101
//	//00000000000000000000000000000110
//	
//	//所以 x=6
//	printf("%d\n", x);
//	//结果就是 6；
//
//	return 0;
//}


////交换两个int变量的值，不使用第三个变量
//#include<stdio.h>
//
//int main()
//{
//	int a = 3;
//	int b = 5;
//	//使用按位异或操作符
//
//	a = a ^ b;
//	//   011  -a
//	//   101  -b
//	//   110   所以a=6
//	b = a ^ b;
//	//  110   -a
//	//  101   -b
//	//  011    所以b=3
//	a = a ^ b;
//	//  110  -a
//	//  011  -b
//	//  101  所以a=5
//
//	//可读性差，执行效率不高，不建议使用
//	return 0;
//}

//int main()
//{
//	int a = 4;
//	a = a + 2;
//	a += 2;//复合赋值符
//
//	a = a >> 1;
//	a >>= 1;//复合赋值符
//
//	a = a & 1;
//	a &= 1;//复合赋值符
//
//	return 0;
//}

//#include<stdio.h>
//int main()
//{
//	int a = 4;
//	int* pa = &a;
//	//取地址操作符一般和指针搭配使用
//	//*pa;
//	//解引用操作符
//
//	int x = sizeof(char);// 1
//	int x1 = sizeof(int);// 4
//	int x2 = sizeof(double);//8
//	int x3 = sizeof(pa);//  4
//
//	printf("%d\n", x);
//
//
//	int b = -1;
//	printf("%d", ~b);
//
//	return 0;
//}


//#include<stdio.h>
//
//int main()
//{
//	int a = 3;
//	int b = 5;
//	int c = a > b ? a : b;
//	//通常用来比较两个数的大小
//	//显然 c应该等于b2，即c=5。
//	printf("%d", c);
//	//输出的结果就是 5
//	return 0;
//}


//#include<stdio.h>
//
//int main()
//{
//	int a = 1;
//	int b = 2;
//	int c = (a > b, a = b + 10, a, b = a + 1);
//	//               a=12          b=12+1=13
//	printf("%d\n", c);
//	//输出结果，c为13
//	return 0;
//}


//#include<stdio.h>
//#include<math.h>
//
//int Isprime(int p)//素数判断
//{
//    int i = 0;
//    if (p <= 1)
//        return 0;
//    else if (p == 2)
//        return 1;
//    else
//    {
//        for (i = 2; i <= sqrt(p); i++)
//        {
//            if (p % i == 0)
//                return 0;
//        }
//        return 1;
//    }
//}
//
//int main()
//{
//    int m, n, i;
//    int count = 1, a[10001];
//
//    scanf("%d %d", &m, &n);
//
//    for (i = 2;; i++)
//    {
//        if (Isprime(i))
//        {
//            a[count] = i;
//            count++;
//            //
////   2 3 5 7  11 13 17 19 23 29 31 37 41 43
//          //  47 53 59 61 67 71 73 79 83 89
//        //    97 101 103 107
//            //
//        }
//        if (count > n)
//            break;
//    }
//    //输出
//    for (i = 0; i <= n - m; i++)
//    {
//        printf("%d", a[m + i]);
//        if ((i + 1) % 10 == 0 || i == n - m)//每10个或者最后结尾
//            printf("\n");
//        else
//            printf(" ");
//    }
//
//    return 0;
//}
