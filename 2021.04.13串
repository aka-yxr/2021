//#include<stdio.h>
//
//int main()
//{
//    int nums[] = { -1,1,-1,1,-1 };
//	int numsSize = 5;
//    int product = 1;
//    int i = 0;
//    for (i = 0; i < numsSize; i++)
//    {
//        product *= nums[i];
//    }
//    printf("all = %d\n", product);
//}

//#define _CRT_SECURE_NO_WARNINGS
//#include<stdio.h>
//#include<string.h>
//#include<assert.h>
//#include<errno.h>
//#include<stdlib.h>
//#include<stdbool.h>
//#include<math.h>

////string  串
//StrAssign(T, *chars);//生成一个等于chars的串T
//StrCopy(T, S);//由串S复制得串T
//ClearString(S);//将串S清空
//StringEmpty(S);//判断S是否为空
//StrLength(S);//返回串的长度
//StrCompare(S, T);//若S>T,返回值>0,若S<T，返回值小于0
//Concat(T, S1, S2);//T由S1和S2联接而成的串
//SubString(Sub, S, pos, len);//用Sub返回S中第pos个字符长度为len的子串
//Tndex(S, T, pos);//
//Replace(S, T, V);//用V替换主串S中出现所有与T相等的不重复的子串
//StrInsert(S, pos, T);//在串S的第pos个字符之前插入串T
//StrDelete(S, pos, len);//从S中删除第pos个起字符长度为len的字串

//int Index(String S, String T, int pos)
//{
//	int n, m, i;
//	String sub;
//	if (pos > 0)
//	{
//		n = StrLength(S);
//		m = StrLength(T);
//		i = pos;
//		while (i <= n - m + 1)
//		{
//			SubString(sub, S, i, m);
//			if (StrCompare(sub, T) != 0)
//				i++;
//			else
//				return i;
//		}
//	}
//	return 0;
//}

//int Index(String S, String T, int pos)
//{
//	int i = pos;
//	int j = 1;
//	while (i <= S[0] && j <= T[0])
//	{
//		if (S[i] == T[i])
//		{
//			i++;
//			j++;
//		}
//		else
//		{
//			i = i - j + 2;
//			j = 1;
//		}
//	}
//	if (j > T[0])
//		return i - T[0];
//	else
//		return 0;
//}

//void get_next(String T, int* next)
//{
//	int i, j;
//	i = 1;
//	j = 0;
//	next[1] = 0;
//	while (i < T[0])//T[0]表示串T的长度
//	{
//		if (j == 0 || T[i] == T[j])
//		{
//			i++;
//			j++;
//			next[i] = j;
//		}
//		else
//			j = next[j];
//	}
//}
//
//int Index_KMP(String S, String T, int pos)
//{
//	int i = pos;
//	int j = 1;
//	int next[255];
//	get_next(T, next);
//	while (i <= S[0] && j <= T[0])
//	{
//		if (j == 0 || S[i] == T[j])
//		{
//			j++;
//			i++;
//		}
//		else
//			j = next[j];
//	}
//	if (j > T[0])
//		return i - T[0];
//	else
//		return 0;
//}

//void get_nextval(String T, int* nextval)
//{
//	int i, j;
//	i = 1;
//	j = 0;
//	nextval[1] = 0;
//	while (i < T[0])
//	{
//		if (j == 0 || T[i] == T[j])
//		{
//			i++;
//			j++;
//			if (T[i] != T[j])
//				nextval[i] = j;
//			else
//				nextval[i] = nextval[j];
//		}
//		else
//			j = nextval[j];
//	}
//}

//KMP
