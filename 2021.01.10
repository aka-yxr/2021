//#include<stdio.h>
//#include<string.h>
//
//int main()
//{
//    double count = 0, sum = 0;
//    char ch[52];
//    gets(ch);
//    int n = strlen(ch);
//    for (int i = 0; i < n; i++)
//    {
//        if (ch[i] == '2')
//            count++;
//    }
//    if (ch[0] == '-')
//    {
//        sum = count * 1.0 / (n - 1);
//        sum *= 1.5;
//    }
//    else
//        sum = count * 1.0 / n;
//    if ((ch[n - 1] - '0') % 2 == 0)
//        sum *= 2;
//    printf("%.2f", sum * 100.0);
//    printf("%\n");
//    return 0;
//}

//#include<stdio.h>
//#include<string.h>
//
//int main()
//{
//    int n, k;
//    scanf("%d %d", &n, &k);
//    char ch[100][11], a[11];//考虑最大字符串。
//    for (int i = 0; i < n; i++)
//        scanf("%s", ch[i]);
//    int i, j;
//    for (i = 0; i < k; i++)
//    {
//        for (j = 0; j < n - i - 1; j++)
//        {
//            //strcmp(s1,s2),返回值大于0，说明s1长度大于s2，小于0，说明s2长度大于s1.
//
//            if (strcmp(ch[j], ch[j + 1]) > 0)
//            {
//                strcpy(a, ch[j]);
//                strcpy(ch[j], ch[j + 1]);
//                strcpy(ch[j + 1], a);
//            }
//        }
//    }
//    for (i = 0; i < n; i++)
//        printf("%s\n", ch[i]);
//    return 0;
//}


//#include<stdio.h>
//
//int main()
//{
//    int n;
//    int a[15][15] = { 0 };
//    scanf("%d", &n);
//    int i, j, k;
//    for (i = 0; i < n; i++)
//        a[i][0] = 1;
//    for (i = 1; i < n; i++)
//    {
//        for (j = 1; j <= i; j++)
//            a[i][j] = a[i - 1][j - 1] + a[i - 1][j];
//    }
//    for (i = 0; i < n; i++)
//    {
//        //    printf("   ");
//        for (j = 0; j < n - i - 1; j++)
//            printf(" ");
//        for (k = 0; k <= i; k++)
//            printf("%4d", a[i][k]);
//        printf("\n");
//    }
//    return 0;
//}


//#include<stdio.h> 
//
//double result_real, result_imag;
//void complex_prod(double x1, double y1, double x2, double y2);
//
//int main(void)
//{
//    double imag1, imag2, real1, real2;
//
//    scanf("%lf %lf", &real1, &imag1);
//    scanf("%lf %lf", &real2, &imag2);
//    complex_prod(real1, imag1, real2, imag2);
//    printf("product of complex is (%f)+(%f)i\n", result_real, result_imag);
//
//    return 0;
//}
//
//void complex_prod(double x1, double y1, double x2, double y2)
//{
//    result_imag = x1 * y2 + x2 * y1;
//    result_real = x1 * x2 - y1 * y2;
//}

//#include<stdio.h>
//
//int main()
//{
//	int begin_;
//	scanf_s("%d",&begin_);
//	printf("%d", begin_);
//}
//#include <stdio.h>
//#include <math.h>
//
//double funcos(double e, double x);
//
//int main()
//{
//    double e, x;
//
//    scanf("%lf %lf", &e, &x);
//    printf("cos(%.2f) = %.6f\n", x, funcos(e, x));
//
//    return 0;
//}
//
//double funcos(double e, double x)
//{
//    double tmp1 = 1, tmp2 = 1, tmp3 = 1, sum = 1;
//    int i, k = -1;
//    for (i = 2; tmp1 > e; i += 2)
//    {
//        tmp2 = tmp2 * x * x;
//        tmp3 = tmp3 * i * (i - 1);
//        sum = sum + k * tmp2 / tmp3;
//        tmp1 = tmp2 / tmp3;
//        k = -k;
//    }
//    return sum;
//}


//#include <stdio.h>
//#include <math.h>
//
//int prime(int p);
//int PrimeSum(int m, int n);
//
//int main()
//{
//    int m, n, p;
//
//    scanf("%d %d", &m, &n);
//    printf("Sum of ( ");
//    for (p = m; p <= n; p++) {
//        if (prime(p) != 0)
//            printf("%d ", p);
//    }
//    printf(") = %d\n", PrimeSum(m, n));
//
//    return 0;
//}
//
//int prime(int p)
//{
//    if (p <= 1)
//        return 0;
//    else if (p == 2)
//        return 1;
//    else
//    {
//        for (int i = 2; i < sqrt(p) + 1; i++)
//            if (p % i == 0)
//                return 0;
//        return 1;
//    }
//
//}
//int PrimeSum(int m, int n)
//{
//    int sum = 0;
//    for (int i = m; i <= n; i++)
//        if (prime(i))
//            sum = sum + i;
//    return sum;
//}


//#include <stdio.h>
//
//int reverse(int number);
//
//int main()
//{
//    int n;
//
//    scanf("%d", &n);
//    printf("%d\n", reverse(n));
//
//    return 0;
//}
//
//int reverse(int number)
//{
//    int t = 0;
//    int n = number;
//    while (n)
//    {
//        t = t * 10 + n % 10;
//        n = n / 10;
//    }
//    return t;
//}
