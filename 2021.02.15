//#include<stdio.h>
//
//int main()
//{
//	int a[5] = { 5,4,3,2,1 };
//
//	int* p = (int*)(&a + 1);
//	//              &a+1指向数组a，1后后面
//
//	printf("%d,%d\n", *(a + 1), *(p - 1));
//	//          a是首元素地址   p-1指向数组a的最后一个元素
//
//	return 0;
//}

//#include<stdio.h>
//
//int main()
//{
//	int arr[2][5] = { 10,9,8,7,6,5,4,3,2,1 };
//	int* p1 = (int*)(&arr + 1);
//	int* p2 = (int*)(*(arr + 1));
//	//                 第一行
//	printf("%d,%d\n", *(p1 - 1), *(p2 - 1));
//
//	return 0;
//}

//旋转字符串
//例如:
//ABCD左旋一个字符得到BCDA
//ABCD左旋两个字符得到CDAB
//
//#include<stdio.h>
//#include<string.h>
//#include<assert.h>

//暴力求解
//void left_move(char* arr, int n)
//{
//	assert(arr != NULL);
//	int i = 0;
//	int len = strlen(arr);
//	char tmp;
//	for (i = 0; i < n; i++)
//	{
//		//左旋1个字符
//		//1
//		tmp = *arr;
//		//2
//		int j = 0;
//		for (j = 0; j < len-1; j++)
//		{
//			*(arr + j) = *(arr + j + 1);
//		}
//		//3
//		*(arr + len - 1) = tmp;
//	}
//
//}
//
////cdefab
////012345
//void right_move(char arr[], int n)
//{
//	int i = 0;
//	int len = strlen(arr);
//	char tmp;
//	for (i = 0; i < n; i++)
//	{
//		//右旋一个
//		//1.
//		tmp = arr[len - 1];
//		//2
//		int j = 0;
//		for (j = len-1; j >=0; j--)
//		{
//			arr[j] = arr[j - 1];
//		}
//		arr[0] = tmp;
//	}
//}

//3步翻转法
//abcdef
//ba fedc
//cdefab

//void reverse(char* left, char* right)
//{
//	assert(left);
//	assert(right);
//	while (left<right)
//	{
//		char tmp = *left;
//		*left = *right;
//		*right = tmp;
//		left++;
//		right--;
//	}
//
//}
//
//void left_move(char* arr, int k)
//{
//	assert(arr);
//	
//	int len = strlen(arr);
//	assert(k <= len);
//
//	reverse(arr,arr+k-1);//逆序左边
//	reverse(arr+k,arr+len-1);//逆序右边
//	reverse(arr,arr+len-1);//逆序整体
//
//}

//int is_left_move(char* s1, char* s2)
//{
//	int len = strlen(s1);
//	int i = 0;
//	for (i = 0; i < len; i++)
//	{
//		left_move(s1, 1);
//		int ret = strcmp(s1, s2);
//		if (ret == 0)
//			return 1;
//	}
//
//	return 0;
//}

//int is_left_move(char* s1, char* s2)
//{
//	int len1 = strlen(s1);
//	int len2 = strlen(s2);
//	if (len1 == len2)
//		return 0;
//	//1.在s1中追加一个s1
//	//strcat
//	//strncat
//	//strcat(s1, s1);//err
//	strncat_s(s1, s1, len1);
//	//
//	char* ret = strstr(s1, s2);
//	if (ret == NULL)
//		return 0;
//	else
//		return 1;
//} 
//
//int main()
//{
//	char arr1[30] = "abcdef";
//	char arr2[] = "cdefba";
//	int ret = is_left_move(arr1, arr2);
//
//	if (ret == 1)
//		printf("YES\n");
//	else
//		printf("NO\n");
//
//	return 0;
//}


//
//int main()
//{
//	char arr[] = "abcdef";
//	left_move(arr, 4);
//	printf("%s\n", arr);
//	printf("-------------\n");
//
////	right_move(arr, 2);
//	printf("%s\n", arr);
//
//	return 0;
//}


//#include<stdio.h>
//
//struct stu
//{
//    char name[20];
//    int a;
//    int b;
//};
//
//int main()
//{
//    int n, i = 0, m;
//    scanf("%d", &n);
//    struct stu s[n];
//    for (i = 0; i < n; i++)
//        scanf("%s %d %d", s[i].name, &s[i].a, &s[i].b);
//    scanf("%d", &m);
//    int num;
//    for (i = 0; i < m; i++)
//    {
//        scanf("%d ", &num);
//        for (int j = 0; j < n; j++)
//        {
//            if (num == s[j].a)
//                printf("%s %d\n", s[j].name, s[j].b);
//        }
//    }
//
//    return 0;
//}

//杨氏矩阵
//每一行，每一列都是递增的
//#include<stdio.h>

//int Find(int arr[][3], int k, int row, int col)
//{
//	int x = 0;
//	int y = col - 1;
//
//	while (x <= row - 1 && y >= 0)
//	{
//		if (arr[x][y] > k)
//			y--;
//		else if (arr[x][y] < k)
//			x++;
//		else
//			return 1;
//	}
//	//找不到
//	return 0;
//}

//int Find(int arr[][3], int k, int* px, int* py)
//{
//	int x = 0;
//	int y = *py - 1;
//
//	while (x <= *px - 1 && y >= 0)
//	{
//		if (arr[x][y] > k)
//			y--;
//		else if (arr[x][y] < k)
//			x++;
//		else
//		{
//			*px = x;
//			*py = y;
//			return 1;
//		}
//	}
//	//找不到
//	return 0;
//}
//
//int main()
//{
//	int arr[3][3] = { {1,2,3},{4,5,6},{7,8,9} };
//	int k = 7;
//	int x = 3;
//	int y = 3;
//
//	//返回型参数
//	int ret = Find(arr, k, &x, &y);
//
//	if (ret == 1)
//	{
//		printf("找到了\n");
//		printf("下标是:%d %d\n", x, y);
//	}
//	else
//		printf("没有找到\n");
//
//	return 0;
//}
