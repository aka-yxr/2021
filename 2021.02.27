#define _CRT_SECURE_NO_WARNINGS
#include<stdio.h>
#include<string.h>
#include<assert.h>
#include<stdlib.h>
#include<errno.h>
#include<windows.h>


//struct S
//{
//	int n;
//	int arr[0];//柔性数组成员
//};
////结构中包含柔性数组成员前面至少有一个其他成员
////sizeof返回的这种结构大小不包括柔性数组的内存
////
////
//
//int mian()
//{
//	struct S s;
//	return 0;
//}


//文件
//int main()
//{
//	int a = 10000;
//	FILE* pf = fopen("test.txt", "wb");
//	fwrite(&a, 4, 1, pf);
//	fclose(pf);
//	pf = NULL;
//
//	return 0;
// }

//不会写代码的都是不讲武德

//静态顺序表 
//typedef int SLDataType;
//#define N 10
//
//struct SeqList
//{
//	SLDataType a[N];
//	int size;
//};
//
//void SeqListPushBack(struct SeqList* ps, SLDataType x);
//void SeqListPopBack(struct SeqList* ps);
//void SeqListPushFront(struct SeqList* ps, SLDataType x);
//void SeqListPopFront(struct SeqList* ps);
//
//int main()
//{
//	return 0;
//}


//动态顺序表
typedef int SLDataType;

typedef struct SeqList
{
	SLDataType* a;
	int size;//有效数据的个数
	int capacity;//容量
}SL,SeqList;

//初始化
void SeqListInit(SL* ps)
{
	/*s.size = 0;
	s.a = NULL;
	s.capacity = 0;*/

	ps->a = (SLDataType*)malloc(sizeof(SLDataType) * 4);
	if (ps->a == NULL)
	{
		printf("申请内存失败\n");
		exit(-1);
	}
	ps->size = 0;
	ps->capacity = 4;
}
//尾插尾删   头插头删
void SeqListPushBack(SL* ps, SLDataType x);
void SeqListPrint(SL* ps);
void SeqListPopBack(SL* ps);
void SeqListPushFront(SL* ps, SLDataType x);
void SeqListPopFront(SL* ps);
void SeqListInsert(SL* ps, int pos, SLDataType x);
void SeqListErase(SL* ps, int pos); 
//扩容接口
void panduan(SL* ps)
{
	if (ps->size >= ps->capacity)
	{
		ps->capacity *= 2;
		ps->a =(SLDataType*)realloc(ps->a, sizeof(SLDataType) * ps->capacity);
		if (ps->a == NULL)
		{
			printf("增容失败\n");
			exit(-1);
		}

	}
}


void text1()
{
	SeqList s;
	SeqListInit(&s);
	SeqListPushBack(&s, 1);
	SeqListPushBack(&s, 2);
	SeqListPushBack(&s, 3);
	SeqListPushBack(&s, 4);
	SeqListPrint(&s);

	SeqListPopBack(&s);
	SeqListPrint(&s);

	SeqListPushFront(&s, -1);
	SeqListPushFront(&s, -2);
	SeqListPrint(&s);

	SeqListPopFront(&s);
	SeqListPopFront(&s);
	SeqListPrint(&s);

	SeqListInsert(&s, 1, 9);
	SeqListPrint(&s);

	SeqListErase(&s, 2);
	SeqListPrint(&s);

}

int main()
{
	text1();
	return 0;
}

//尾增
void SeqListPushBack(SL* ps, SLDataType x)
{
	assert(ps);
	//先判断容量是否满了，满了需要增加容量
	panduan(ps);
	ps->a[ps->size] = x;
	ps->size++;

}
//打印函数
void SeqListPrint(SL* ps)
{
	assert(ps);
	for (int i = 0; i < ps->size; i++)
	{
		printf("%d ", ps->a[i]);
	}
	printf("\n");
}

//尾删
void SeqListPopBack(SL* ps)
{
	assert(ps);

	//ps->a[ps->size - 1] = 0;

	ps->size--;

}

//首插
void SeqListPushFront(SL* ps, SLDataType x)
{
	assert(ps);
	panduan(&ps);
	int end = ps->size - 1;
	while (end>=0)
	{
		ps->a[end + 1] = ps->a[end];
		end--;
	}
	ps->a[0] = x;
	ps->size++;

}
//首删
void SeqListPopFront(SL* ps)
{
	assert(ps);

	int front = 0;
	while (front < ps->size - 1)
	{
		ps->a[front] = ps->a[front + 1];
		front++;
	}
	ps->size--;

}
//任意位置插数字
void SeqListInsert(SL* ps, int pos, SLDataType x)
{
	assert(ps);
	panduan(ps);

	int i = pos;
	for (i = ps->size-1; i >= pos; i--)
	{
		ps->a[i + 1] = ps->a[i];
	}
	ps->a[pos] = x;
	ps->size++;

}

//任意位置删数字
void SeqListErase(SL* ps, int pos)
{
	assert(ps);
	int i = pos;
	//1 9 2 3
	for (i = pos; i < ps->size-1; i++)
	{
		ps->a[i] = ps->a[i + 1];
	}
	ps->size--;
}

