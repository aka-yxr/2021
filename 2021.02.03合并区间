//合并区间
//#include<stdio.h>
//#include<stdlib.h>
//#include<string.h>
//
//int cmp(const void* a, const void* b)
//{
//	int* c = (int*)a, * d = (int*)b;
//
//	return c[0] - d[0];
//}
//
//int main()
//{
//	int intervals[4][2] = { {1,3},{2,6},{8,10},{15,18} };
//	int i, intervalslen = 4, k = 0;
//	int flag[4];
//	int result[4][2] = { 0 };
//
//	qsort(intervals, 4, sizeof(int) * 2, cmp);
//
//	for (i = 0; i < intervalslen - 1; i++)
//	{
//		if (intervals[i + 1][0] <= intervals[i][1])
//		{
//			intervals[i + 1][0] = intervals[i][0];
//			intervals[i+1][1]=(intervals[i][1]>intervals[i+1][1]? intervals[i][1] : intervals[i + 1][1]);
//			flag[i] = 1;
//		}
//	}
//	for (i = 0; i < intervalslen; i++)
//	{
//		if (flag[i] == 1)
//			continue;
//		result[k][0] = intervals[i][0];
//		result[k][1] = intervals[i][1];
//		k++;
//	}
//
//	for (i = 0; i < k - 1; i++)
//		printf("[%d %d],", result[i][0], result[i][1]);
//	printf("[%d %d]", result[i][0], result[i][1]);
//
//	return 0;
//}

//#include<stdio.h>
//void hanoi(int n, char a, char b, char c)
//{
//	if (n == 1)
//		printf("%c-->%c\n", a, b);
//	else
//	{
//		hanoi(n - 1, a, c, b);
//		printf("%c-->%c\n", a, b);
//		hanoi(n - 1, c, b, a);
//	}
//
//}
//
//int main()
//{
//	int n;
//	scanf_s("%d", &n);
//	printf("the steps for %d disk are:\n", n);
//
//	hanoi(n, 'a', 'b', 'c');
//
//	return 0;
//}

//#include<stdio.h>
//#define Mile_to_memter 1609
//#define Foot_to_centimeter 30.48
//#define Inch_to_centimeter 2.54
//
//int main()
//{
//	float foot, inch, mile;
//	scanf_s("%f %f %f", &mile, &foot, &inch);
//
//	printf("%f miles = %f meters \n", mile, mile * Mile_to_memter);
//	//计算英里的米数
//	printf("%f feet = %f centimeters\n", foot, foot * Foot_to_centimeter);
//	//计算英尺的厘米数
//	printf("%f inches = %f centimeters\n", inch, inch * Inch_to_centimeter);
//
//	return 0;
//}

//#include<stdio.h>
//
//int main()
//{
//	int i, flag = 0;
//	char ch;
//	const char* color[5] = { "red","blue","yellow","green","black" };
//
//	ch = getchar();
//	for (i = 0; i < 5; i++)
//	{
//		if (*color[i] == ch)
//		{
//			flag = 1;
//			puts(color[i]);
//		}
//	}
//
//	if (flag == 0)
//		printf("Not Found\n");
//
//	return 0;
//}

//#include<stdio.h>
//
//int main()
//{
//	int i, flag = 0;
//	char ch;
//	const char* color[5] = { "red","bule","yellow","green","black" };
//	const char** pc;
//	pc = color;
//	ch = getchar();
//	for (i = 0; i < 5; i++)
//	{
//		if (**(pc + i) == ch)
//		{
//			flag = 1;
//			puts(*(pc + i));
//		}
//	}
//	if (flag == 0)
//		printf("Not Found\n");
//
//	return 0;
//}

//#include <stdio.h>
//#include <stdlib.h>
//#include <string.h>
//
//struct Interval
//{
//	int start;
//	int end;
//};
//
//int cmp(const void* a, const void* b)
//{
//	return ((struct Interval*)a)->start - ((struct Interval*)b)->start;
//}
//
//struct Interval* merge(struct Interval* intervals, int intervalsLen, int* returnSize)
//{
//	struct Interval* result = (struct Interval*)malloc(intervalsLen * sizeof(struct Interval));
//	int i = 0, k = 0;
//	int flag[intervalsLen];
//	memset(flag, 0, sizeof(flag));
//	qsort(intervals, intervalsLen, sizeof(struct Interval), cmp);
//
//	for (i = 0; i < intervalsLen - 1; i++)
//	{
//		if (intervals[i + 1].start <= intervals[i].end)
//		{
//			intervals[i + 1].start = intervals[i].start;
//			intervals[i + 1].end = (intervals[i].end > intervals[i + 1].end ? intervals[i].end : intervals[i + 1].end);
//			flag[i] = 1;
//		}
//	}
//	for (i = 0; i < intervalsLen; i++)
//	{
//		if (flag[i] == 1)
//			continue;
//		result[k++] = intervals[i];
//	}
//	*returnSize = k;
//	return result;
//}
//
//int main()
//{
//	struct Interval intervals[] = { {10,20},{30,60},{50,100},{20,180} };
//	int returnSize;
//	int i = 0;
//	struct Interval* result = merge(intervals, 4, &returnSize);
//	for (i = 0; i < returnSize - 1; i++)
//	{
//		printf("[%d,%d],", result[i].start, result[i].end);
//	}
//	printf("[%d,%d]\n", result[returnSize - 1].start, result[returnSize - 1].end);
//	free(result);
//	result = NULL;
//	return 0;
//}
