//#define _CRT_SECURE_NO_WARNINGS
//#include<stdio.h>
//#include<string.h>
//#include<assert.h>
//枚举
 //枚举增加了代码的可读性和可维护性
//便于调试
//使用方便
//
//enum Color
//{
//	//枚举的可能取值--常量
//	//常量是可以赋初始值的
//	RED,
//	GREEN,
//	BLUE
//};
//
//int main()
//{
//	printf("%d %d %d\n", RED, GREEN, BLUE);
//
//	return 0;
//}


//联合-联合体-共用体
//联合体成员不应该同时使用

//union Un
//{
//	char c;
//	int i;
//};
//
//int main()
//{
//	union Un u;
//	printf("%d\n", sizeof(u));
//	//4;
//	printf("%p\n", &u);
//	printf("%p\n", &(u.c));
//	printf("%p\n", &(u.i));
//	//公用一块空间
//
//	return 0;
//}

//大小端存储

//int check_sys()
//{
//	/*int a = 1;
//	return *(char*)&a;*/
//	union Un
//	{
//		char c;
//		int i;
//	}u;
//
//	u.i = 1;
//
//	return u.c;
//}
//
//int main()
//{
//	int a = 1;
//	int ret = check_sys();
//	if (ret == 1)
//		printf("小端\n");
//	else
//		printf("大端\n");
//
//	return 0;
//}

//联合体的大小至少是最大成员的大小
//当最大成员大小不是最大对齐数的整数倍的时候，要对齐到最大对齐数的整数倍。

//union Un
//{
//	int a;//4
//	char arr[5];//5
//};
//
//int main()
//{
//	union Un u;
//	printf("%d\n", sizeof(u));
//	//8
//	return 0;
//}

//动态内存分配
//#include<stdlib.h>
//#include<errno.h>


//int main()
//{
//	int* p = malloc(10 * sizeof(int));
//	if (p == NULL)
//		printf("%s\n", strerror(errno));
//	else
//	{
//		int i = 0;
//		for (i = 0; i < 10; i++)
//		{
//			*(p + i) = i;
//		}
//		for (i = 0; i < 10; i++)
//			printf("%d ", p[i]);
//	}
//	//当动态申请的空间不再使用时，应该还给操作系统。
//
//	free(p);
//	p = NULL;
//
//	return 0;
//}

////malloc
////calloc会在返回地址之前把申请的空间的每个字节初始化为0
//int main()
//{
//	int* p = (int*)calloc(10, sizeof(int));
//	if (p == NULL)
//		printf("%s\n", strrttot(errno));
//	else
//	{
//		int i = 0;
//		for (i = 0; i < 10; i++)
//			printf("%d ", p[i]);
//	}
//	free(p);
//	p = NULL;
//
//	return 0;
//}


//realloc
//动态调整开辟内存的大小

//int main()
//{
//	int* p = (int*)malloc(20);
//	if (p == NULL)
//		printf("%s\n", strerror(errno));
//	else
//	{
//		int i = 0;
//		for (i = 0; i < 5; i++)
//		{
//			p[i] = i;
//		}
//	}
	//可以使realloc来调整动态开辟的内存

	//realloc函数使用的注意事项
	//1.如果p指向的空间之后有足够的内存空间可以追加，则直接追加，后返回p。
	//2.如果p指向的空间之后没有足够的内存空间课追加，则realloc函数会重新找到一个新的内存区域
	//开辟一块满足需求的空间，并把原来内存中的数据拷贝过来，释放久空间
	//最后返回新开辟的内存空间地址。
	//3.
	//

//	int* p2 = realloc(p, 40);
//	if (p2 != NULL)
//	{
//		p = p2;
//		int i = 0;
//		for (i = 5; i < 10; i++)
//		{
//			*(p+i) = i;
//		}
//		for (i = 0; i < 10; i++)
//		{
//			printf("%d ", *(p+i));
//		}
//	}
//	
//	//释放内存
//	free(p);
//	p = NULL;
//
//	return 0;
//}


//动态内存的常见错误
//int main()
//{
//	//1.对NULL进行解引用操作
//	//int* p = (int*)malloc(40);
//	////如果malloc失败了，p就会被赋值成NULL
//	//*p = 0;//err
//
//	//2.对堕胎开辟的内存的越界访问
//	//int* p = malloc(5 * sizeof(int));
//	//if (p == NULL)
//	//	return 0;
//	//else
//	//{
//	//	int i = 0;
//	//	for (i = 0; i < 10; i++)
//	//	{
//	//		*(p + i) = i;
//	//	}
//	//}
//	////释放
//	//free(p);
//	//p = NULL;
//
//	//int a = 10;
//	//int* p = &a;
//	//*p = 20;
//	////3.对非动态开辟内存的free;
//	//free(p);
//	//p = NULL;
//
//	return 0;
//}
