#define _CRT_SECURE_NO_WARNINGS
#include<stdio.h>
#include<string.h>
#include<assert.h>
#include<errno.h>
#include<stdlib.h>

//void rotate(int* nums, int numsSize, int k) 
//{
//    k = k % numsSize;
//    int i = 0, tmp = 0;
//    for (i = 0; i < k; i++)
//    {
//        tmp = nums[numsSize - 1];
//        for (int j = numsSize - 1; j > 0; j--)
//        {
//            nums[j] = nums[j - 1];
//        }
//        nums[0] = tmp;
//    }
//}
//
//int main()
//{
//    int nums[] = { 1,2,3,4,5,6,7 };
//    int k = 3;
//    int numsSize = sizeof(nums) / sizeof(int);
//    rotate(&nums, numsSize, k);
//    for (int i = 0; i < numsSize; i++)
//    {
//        printf("%d ", nums[i]);
//    }
//
//	return 0;
//}

//struct S
//{
//	char name[20];
//	int age;
//	double score;
//};
//
//int main()
//{
//	struct S s = { "katiterna",20,98.9 };
//	struct S tmp = { 0 };
//
//	FILE* pf = fopen("test.txt", "wb");
//	if (pf == NULL)
//	{
//		return 0;
//	}
//	//二进制形式写文件
//	//fwrite(&s, sizeof(struct S), 1, pf);
//
//	//二进制读文件
//	fread(&tmp, sizeof(struct S), 1, pf);
//	printf("%s %d %lf\n", tmp.name, tmp.age, tmp.score);
//
//	fclose(pf);
//	pf = NULL;
//
//	return 0;
//}

//定位文件指针
//int main()
//{
//	FILE* pf = fopen("test.txt", "r");
//	if (pf == NULL)
//	{
//		return 0;
//	}
//	//定位文件指针
//	fseek(pf, 2, SEEK_END);
//	//读取文件
//	int ch = fgetc(pf);
//	printf("%c ", ch);
//	fclose(pf);
//	pf = NULL;
//
//	return 0;
//}

//int main()
//{
//	FILE* pf = fopen("test.txt", "r");
//	if (pf == NULL)
//	{
//		return 0;
//	}
//	//定位文件指针
//	fseek(pf, 2, SEEK_END);
//	//读取文件
//
//	int ch = ftell(pf);
//	printf("%d ", ch);
//	fclose(pf);
//	pf = NULL;
//
//	return 0;
//}

//int main()
//{
//	//strerror(errno);--把错误码对应的错误信息字符串地址返回
//	
//	//perror
//	FILE* pf = fopen("test2.txt", "r");
//	if (pf == NULL)
//	{
//		perror("hehe");
//		return 0;
//	}
//	fclose(pf);
//	pf = NULL;
//	return 0;
//}

//void rotate(int* nums, int numsSize, int k) {
//
//    int newArr[numsSize];
//    for (int i = 0; i < numsSize; ++i) {
//        newArr[(i + k) % numsSize] = nums[i];
//        //把数字按要求放在临时数组内
//    }
//    for (int i = 0; i < numsSize; ++i) {
//        nums[i] = newArr[i];
//    }
//
//}


//void reverse(int* nums, int left, int right)
//{
//    while (left < right)
//    {
//        int tmp = nums[left];
//        nums[left] = nums[right];
//        nums[right] = tmp;
//        left++;
//        right--;
//    }
//}
//
//void rotate(int* nums, int numsSize, int k) {
//    k %= numsSize; //如果没有这一步，可能会发生越界。
//    reverse(nums, 0, numsSize - 1 - k);//把前面的数逆置
//    reverse(nums, numsSize - k, numsSize - 1);//把后面的数字逆置
//    reverse(nums, 0, numsSize - 1);//把整体逆置
//    //1 2 3 4 5 6 7    
//    //4 3 2 1 7 6 5   前后分别逆置
//    //5 6 7 1 2 3 4   整体再次逆置
//
//}


//typedef struct {
//	int a;//4
//	char b;//1  4
//	short c; // 2
//	short d; // 2
//}AA_t;
//
//int main()
//{
//	printf("%d\n", sizeof(AA_t));
//
//	return 0;
//}
