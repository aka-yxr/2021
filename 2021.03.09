//#define _CRT_SECURE_NO_WARNINGS
//#include<stdio.h>
//#include<string.h>
//#include<assert.h>
//#include<errno.h>
//#include<stdlib.h>
//#include<math.h>

//int main()
//{
//    int y, x;
//    char op;
//    //没有空格，且至少有一个操作数。可以先读入一个数字；将前一个运算的结果当作Y
//    int i = 0;//判断是否出错 
//    scanf("%d", &y);
//    while (op != '=')
//    {
//        op = getchar();
//        if (op == '=')
//            break;
//        scanf("%d", &x);
//        if (op == '+' || op == '-' || op == '*' || op == '/')
//        {
//            if (op == '+')
//                y = y + x;
//            else if (op == '-')
//                y = y - x;
//            else if (op == '*')
//                y = y * x;
//            else if (op == '/')
//            {
//                if (x == 0)
//                {
//                    printf("ERROR");
//                    i++;
//                }
//                else
//                    y = y / x;
//            }
//        }
//        else
//        {
//            printf("ERROR");
//            i++;
//        }
//    }
//    if (i == 0)
//        printf("%d", y);
//    return 0;
//}

//struct Peole
//{
//    char name[5];
//    int breathe;
//    int heart;
//    int normal;
//};
//
//int main()
//{
//    struct Peole s[11];
//    int n;
//    scanf("%d", &n);
//    for (int i = 0; i < n; i++)
//    {
//        getchar();
//        scanf("%s%d%d", s[i].name, &s[i].breathe, &s[i].heart);
//        if (s[i].breathe >= 15 && s[i].breathe <= 20 && s[i].heart >= 50 && s[i].heart <= 70)
//            s[i].normal = 1;
//        else
//            s[i].normal = 0;
//    }
//    for (int i = 0; i < n; i++)
//    {
//        if (!s[i].normal)
//            printf("%s\n", s[i].name);
//    }
//
//    return 0;
//}

//int main()
//{
//    char str, fu[101][101];
//    int n, count = 0;
//    scanf("%c%d", &str, &n);
//    getchar();
//    for (int i = 0; i < n; i++)
//    {
//        for (int j = 0; j < n; j++)
//            scanf("%c", &fu[i][j]);
//        getchar();
//    }
//
//    for (int i = 0; i < n; i++)
//    {
//        for (int j = 0; j < n; j++)
//        {
//            if (fu[i][j] != fu[n - i - 1][n - j - 1])//判断上下是否一样
//                count++;
//        }
//
//    }
//
//    if (count)//需要倒一下
//    {
//        for (int i = n - 1; i >= 0; i--)
//        {
//            for (int j = n - 1; j >= 0; j--)
//            {
//                if (fu[i][j] == ' ')
//                    printf(" ");
//                else
//                    printf("%c", str);
//            }
//            printf("\n");
//        }
//    }
//    else
//    {
//        printf("bu yong dao le\n");
//        for (int i = n - 1; i >= 0; i--)
//        {
//            for (int j = n - 1; j >= 0; j--)
//            {
//                if (fu[i][j] == ' ')
//                    printf(" ");
//                else
//                    printf("%c", str);
//            }
//            printf("\n");
//        }
//    }
//    return 0;
//}

//struct Stu
//{
//    char name[10];
//    int number;
//};
//
//int main()
//{
//    int n, sum = 0;
//    scanf("%d", &n);
//    struct Stu s[n];
//    for (int i = 0; i < n; i++)
//    {
//        getchar();
//        scanf("%s %d", s[i].name, &s[i].number);
//        sum += s[i].number;
//    }
//    printf("%d ", sum / n / 2);
//    int min = s[0].number;
//    int index = 0;
//    for (int i = 0; i < n; i++)
//    {
//        if (fabs(s[i].number - (sum / n / 2)) < min)
//        {
//            min = abs(s[i].number - (sum / n / 2));
//            index = i;
//        }
//    }
//    printf("%s\n", s[index].name);
//
//    return 0;
//}

//List MakeEmpty()
//{
//    List L;
//    L = (List)malloc(sizeof(struct LNode));
//    L->Last = -1;
//    return L;
//}
//
//Position Find(List L, ElementType X)
//{
//    int i;
//    for (i = 0; i <= L->Last; i++)
//        if (L->Data[i] == X)
//            return i;
//    return ERROR;
//}
//
//bool Insert(List L, ElementType X, Position P)
//{
//    if (L->Last + 1 == MAXSIZE)
//    {
//        printf("FULL");
//        return false;
//    }
//    if (P<0 || P>(L->Last + 1))
//    {
//        printf("ILLEGAL POSITION");
//        return false;
//    }
//    for (int i = L->Last; i >= P; i--)
//    {
//        L->Data[i + 1] = L->Data[i];
//    }
//    L->Data[P] = X;
//    L->Last++;
//    return true;
//}
//
//bool Delete(List L, Position P)
//{
//    if (P<0 || P>L->Last)
//    {
//        printf("POSITION %d EMPTY", P);
//        return false;
//    }
//    else
//    {
//        int i;
//        for (i = P; i < L->Last; i++)
//            L->Data[i] = L->Data[i + 1];
//        L->Last--;
//        return true;
//    }
//}
