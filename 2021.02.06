//计算器
//#include<stdio.h>
//
//void menu()
//{
//	printf("*********************\n");
//	printf("** 1.Add     2.Sub **\n");
//	printf("** 3.Mul     4.Div **\n");
//	printf("***      0.exit    **\n");
//	printf("*********************\n");
//}
//
//int Add(int x, int y)
//{
//	return x + y;
//}
//
//int Sub(int x, int y)
//{
//	return x - y;
//}
//
//int Mul(int x, int y)
//{
//	return x * y;
//}
//
//int Div(int x, int y)
//{
//	return x / y;
//}
//
//void Calc(int (*pf)(int, int))
//{
//	int x, y;
//	printf("Please input two numbers >>:");
//	scanf_s("%d %d", &x, &y);
//	printf("%d\n", pf(x, y));
//}
//
//int main()
//{
//	int input, x, y;
//	int(*pfarr[5])(int, int) = {0, Add,Sub,Mul,Div };
//
//	/*do
//	{
//		menu();
//		printf("Please choose yours >>:");
//		scanf_s("%d", &input);
//		if (input >= 1 && input <= 4)
//		{
//			printf("Please input two numbers >>:");
//			scanf_s("%d %d", &x, &y);
//			int ret = pfarr[input](x, y);
//			printf("%d \n", ret);
//		}
//		else if (input == 0)
//			printf("exit\n");
//		else
//			printf("选择错误\n");
//
//	} while (input);*/
//
//	do
//	{
//		menu();
//		printf("Please choose yours >>:");
//		scanf_s("%d", &input);
//		
//		switch (input)
//		{
//		case 1:
//			//printf("%d\n", Add(x, y));
//			Calc(Add);
//			break;
//		case 2:
//			//printf("%d\n",Sub(x,y));
//			Calc(Sub);
//			break;
//		case 3:
//			//printf("%d\n",Mul(x,y));
//			Calc(Mul);
//			break;
//		case 4:
//			//printf("%d\n",Div(x,y));
//			Calc(Div);
//			break;
//		case 0:
//			printf("exit\n");
//			break;
//		default:
//			printf("Please intput again\n");
//			break;
//		}
//
//	} while (input);
//
//	return 0;
//}

//#include<stdio.h>
//
//int Add(int x, int y)
//{
//	return x + y;
//}
//int main()
//{
//	int arr[10] = { 0 };
//	int(*p)[10] = &arr;//取出数组的地址
//
//	int (*pfarr[4])(int, int);
//	//pfarr是一个数组--函数指针的数组
//	int (*(*ppfarr)[4])(int, int) = &pfarr;
//	//ppfarr 是一个指向【 函数指针数组】的指针
//	//ppfarr是一个数组指针，指针指向的数组有4个元素
//	//指向的数组的每个元素的类型是一个函数指针int (*)(int,int);
//
//
//	return 0;
//}

//回调函数机制
//#include<stdio.h>
//void print(char* str)
//{
//	printf("hehe:%s", str);
//}
//void test(void (*p)(char*))
//{
//	printf("test\n");
//	p("bit");
//}
//
//int main()
//{
//	test(print);
//	return 0;
//}

//冒泡排序函数
//冒泡排序函数只能排序整形数组
//qsort--库函数，可以排序任意类型的数据
//#include<stdio.h>
//#include<stdlib.h>
//#include<string.h>
//
//void my_sort(int arr[], int size)
//{
//	int i = 0;
//	for (i = 0; i < size; i++)
//	{
//		//一趟冒泡排序
//		int j = 0;
//		for (j = 0; j < size-1-i; j++)
//		{
//			if (arr[j] > arr[j + 1])
//			{
//				int temp = arr[j];
//				arr[j] = arr[j + 1];
//				arr[j + 1] = temp;
//			}
//		}
//	}
//
//}
//
//struct stu
//{
//	char name[20];
//	int age;
//};
//
//int cmp1(const void* a, const void* b)
//{
//	//void* 无类型指针，可以接收任意类型的地址
//	//void*类型的指针不能进行解引用操作
//	//void*类型的指针不难进行加减操作
//	return *(int*)a - *(int*)b;
//
//}
//int cmp2(const void* a, const void* b)
//{
//	return (int)(*(float*)b - *(float*)a);
//}
//
//int cmp3(const void* a, const void* b)
//{
//	return ((struct stu*)a)->age - ((struct stu*)b)->age;
//}
//
//int cmp4(const void* a, const void* b)
//{
//	return strcmp(((struct stu*)a)->name, ((struct stu*)b)->name);
//}
//
//int main()
//{
//	int arr[10] = { 2,3,4,5,6,1,9,0,8,7 };
//	int size = sizeof(arr) / sizeof(arr[0]);
//
//	struct stu s[3] = { {"zhangsan",20},{"lisi",30},{"wangwu",10} };
//	float f[] = { 9.0,8.0,7.0,5.0,4.0,6.0 };
//
//	//my_sort(arr, size);
//	qsort(arr, size, sizeof(arr[0]), cmp1);
//	
//	int i = 0;
//	printf("按小到大排序 arr 数组\n");
//	for (i = 0; i < size; i++)
//	{
//		printf("%d ", arr[i]);
//	}
//	printf("\n");
//	printf("大到小排序 f 数组\n");
//	size = sizeof(f) / sizeof(f[0]);
//	qsort(f, size, sizeof(f[0]), cmp2);
//
//	for (i = 0; i < size; i++)
//	{
//		printf("%.2f ", f[i]);
//	}
//	printf("\n");
//	printf("按年龄大小排序 s 数组\n");
//	size = sizeof(s) / sizeof(s[0]);
//	qsort(s, size, sizeof(s[0]), cmp3);
//
//	for (i = 0; i < size; i++)
//	{
//		printf("%s\n", s[i].name);
//	}
//	printf("\n");
//	printf("按名字长度排序 s 数组\n");
//	qsort(s, size, sizeof(s[0]), cmp4);
//
//	for (i = 0; i < size; i++)
//	{
//		printf("%s\n", s[i].name);
//	}
//	return 0;
//}


//#include<stdio.h>
//int Add(int x, int y)
//{
//	return x + y;
//}
//
//int main()
//{
//	//指针数组 是 数组
//	int* arr[10];
//	//数组指针 是 指针
//	int* (*pa)[10] = &arr;
//	//函数指针
//	int (*pAdd)(int, int) = Add;//也可&Add;
//	printf("%d", (*pAdd)(1, 2));
//	//函数指针的数组
//	int (*parr[4])(int, int);
//	//指向数组指针的指针
//	int(*(*pparr)[4])(int, int);
//
//	return 0;
//}



//#include<stdio.h>
//
//int maxScore(int* cardPoints, int cardPointsSize, int k)
//{
//    int i = 0, sum1 = 0, x = 0;
//    for (i; i < k; i++)//先把前面k个加起来
//    {
//        sum1 += cardPoints[i];
//    }
//    x = sum1;//把前面k个的值先存放到x里，
//    for (i = 0; i < k; i++)
//    {
//        //sum1带着前面k个的值
//        //开始加后面1个，减去前面一个，并比较此步操作之后，是前面的大还是后面的大。依次进行到k。
//        sum1 += cardPoints[cardPointsSize - 1 - i] - cardPoints[k - 1 - i];
//        x = sum1 > x ? sum1 : x;
//
//    }
//
//    return x;
//
//}
//
//int main()
//{
//	int cardPoints[] = { 1,2,3,4,5,6,1 };
//	int k = 3;
//	int cardPointsSize = sizeof(cardPoints) / sizeof(cardPoints[0]);
//
//	int max = maxScore(cardPoints, cardPointsSize, k);//求最大点数
//
//	printf("%d ", max);
//
//	return 0;
//}
