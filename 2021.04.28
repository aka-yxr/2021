#define _CRT_SECURE_NO_WARNINGS
//#include<stdio.h>
//#include<string.h>
//#include<assert.h>
//#include<errno.h>
//#include<stdlib.h>
//#include<stdbool.h>
//#include<math.h>
//
////Graph --图
//
////邻接矩阵  是用两个数组来表示图，一个一维数组存储图中的顶点信息。
////                 一个二维数组（称之为邻接矩阵）存储图中的边或弧的信息
//
//typedef char VertexType;
//typedef int EdgeType;
//#define MAXVEX 100
//#define INFINITY 65535
//
//typedef struct
//{
//	VertexType vexs[MAXVEX];//顶点表
//	EdgeType arc[MAXVEX][MAXVEX];//邻接矩阵
//	int numVertexes, numEdges;
//}MGraph;
//
////建立无向图的邻接矩阵
//void CreateMgraph(MGraph* G)
//{
//	int i, j, k, w;
//	printf("输入顶点数和边数;\n");
//	scanf("%d %d", & G->numVertexes, &G->numEdges);
//	for (i = 0; i < G->numVertexes; i++)
//		for (j = 0; j < G->numVertexes; j++)
//			G->arc[i][j] = INFINITY;
//	for (k = 0; k < G->numEdges; k++)
//	{
//		printf("输入边（vi,vj）上的下标i，下标j和权w：\n");
//		G->arc[i][j] = w;
//		G->arc[j][i] = G->arc[i][j];  //无向图，矩阵对称
//	}
//
//}
//
//
////邻接表  数组与链表相结合的存储方法称为邻接表
////1.图中顶点用一个一维数组存储
////2.图中每个顶点vi的所有邻接点构成一个线性表
//
//typedef struct EdgeNode
//{
//	int adjvex;
//	EdgeType weight;
//	struct EdgeNode* next;
//}EdgeNode;
//
//typedef struct VertexNode
//{
//	VertexType data;
//	EdgeNode* firstedge;
//}VertexNode, AdjList[MAXVEX];
//
//typedef struct
//{
//	AdjList adjList;
//	int numVertexes, numEdges;
//}GraphAdjList;
//
////建立图的邻接表结构
//void CreateALGraph(GraphAdjList* G)
//{
//	int i, j, k;
//	EdgeNode* e;
//	printf("输入顶点数和边数:\n");
//	scanf("%d %d", &G->numVertexes, &G->numEdges);
//	for (i = 0; i < G->numVertexes; i++)
//	{
//		scanf(&G->adjList[i].data);//输入顶点
//		G->adjList[i].firstedge = NULL;//将边表置空
//	}
//
//	for (k = 0; k < G->numEdges; k++)
//	{
//		printf("输入边（vi，vj）上的顶点序号");
//		scanf("%d %d", &i, &j);
//		e = (EdgeNode*)malloc(sizeof(EdgeNode));
//
//		e->adjvex = j;
//		e->next = G->adjList[i].firstedge;
//		G->adjList[i].firstedge = e;
//
//		e = (EdgeNode*)malloc(sizeof(EdgeNode));
//
//		e->adjvex = i;
//		e->next = G->adjList[j].firstedge;
//		G->adjList[j].firstedge = e;
//	}
//}
//
//
////十字链表
