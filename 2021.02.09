//#include<stdio.h>
//
//int subarraysWithKDistinct(int* A, int ASize, int K)
//{
//    int left = 0;
//    int right = 0;
//    int count = 0;
//    int i = 0, j = 0, diff = 0;
//    int* num = (int*)malloc(sizeof(int) * (ASize + 1));
//    memset(num, 0, sizeof(int) * (ASize + 1));
//    for (i = 0; i < ASize; i++)
//    {
//        if (i > 0)
//        {
//            num[A[i - 1]]--;
//            if (num[A[i - 1]] == 0)
//            {
//                diff--;
//            }
//        }
//        while (j >= i && diff >= K)
//        {
//            j--;
//            num[A[j]]--;
//            if (num[A[j]] == 0)
//            {
//                diff--;
//            }
//        }
//        for (; j < ASize; j++)
//        {
//            if (diff > K)
//            {
//                break;
//            }
//            if (num[A[j]] == 0)
//            {
//                diff++;
//            }
//            num[A[j]]++;
//            if (diff == K)
//            {
//                count++;
//            }
//        }
//    }
//
//    return count;
//
//}
//
//int main()
//{
//	int A[] = { 1,2,1,2,3 };
//	int Asize = 5;
//	int K=2;
//	int number = subarraysWithKDistinct(A, Asize, K);
//
//	printf("%d\n", number);
//	return 0;
//}

//#include<stdio.h>
//
//struct Test
//{
//	int num;
//	char* pcname;
//	short sdate;
//	char cha[2];
//	short sba[4];
//}*p;
////假设p值为0x100000，
////已知 结构体Test类的的变量大小为20个字节
//
//int main()
//{
//	p = (struct Test*)0x100000;
//	printf("%p\n", p + 0x1);//10进制加20，16进制+14；
//	//    0x1000014
//	printf("%p\n", (unsigned long)p + 0x1);
//	//整型+1。   0x100001
//	printf("%p\n", (unsigned int*)p + 0x1);
//	//无符号整型类型 +0x1相当于+4；//0x100004
//	return 0;
//}

//#include<stdio.h>
//
//int main()
//{
//	int a[4] = { 1,2,3,4 };
//	int* p1 = (int*)(&a + 1);//p1指向的地址是在数组a的后面
//	int* p2 = (int*)((int)a + 1);//相当于向后移动一个字节
//
//	printf("%x %x", p1[-1], *p2);
//	//     p1[-1]相当于*(p-1)即应该指向a中的4
//	//     *（p2）--0x 02 00 00 00
//	return 0;
//}

//#include<stdio.h>
//
//int main()
//{
//	int a[3][2] = { (0,1),(2,3) ,(4,5) };
//	//                逗号表达式
//	//  1  3
//	//  5  0
//	//  0  0
//	int* p=NULL;
//	p = a[0];
//	//指针p指向a的第一行
//	printf("%d\n", p[0]);
//	//p[0]就是第一行的第一个元素
//	return 0;
//}

//#include<stdio.h>
//
//int main()
//{
//	int a[5][5];
//	int(*p)[4];
//	p = a;
//	printf("%p,%d\n", &p[4][2] - &a[4][2], &p[4][2] - &a[4][2]);
//     -4     ,         -4
//	return 0;
//}

//#include<stdio.h>
//
//int main()
//{
//	int a[2][5] = { 1,2,3,4,5,6,7,8,9,10 };
//	int* p1 = (int*)(&a + 1);
//	int* p2 = (int*)(*(a + 1));
//	printf("%d,%d\n", *(p1 + 1), *(p2 + 1));
//
//	return 0;
//}

//#include <stdio.h>
//#include <string.h>
//
//int main()
//{
//	char str[50];
//
//	strcpy(str, "This is string.h library function");
//	puts(str);
//
//	memset(str, '$', 7);
//	puts(str);
//
//	return(0);
//}

//This is string.h library function
//$$$$$$$ string.h library function
