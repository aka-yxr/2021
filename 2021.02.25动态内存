//#define _CRT_SECURE_NO_WARNINGS
//#include<stdio.h>
//#include<string.h>
//#include<assert.h>
//#include<stdlib.h>
//#include<errno.h>
//#include<windows.h>

//有关动态内存的常见错误

//int main()
//{
//	//4.使用free释放动态开辟内存的一部分
//	/*int* p = (int*)malloc(40);
//	if (p == NULL)
//		return 0;
//	else
//	{
//		int i = 0;
//		for (i = 0; i < 5; i++)
//		{
//			*p++ = i;
//		}
//	}
//	free(p);
//	p = NULL;*/
//
//	//5.对同一块动态内存的多次释放。
//	/*int* p = (int*)malloc(40);
//	if (p == NULL)
//		return 0;
//	free(p);
//	p = NULL;
//	free(p);*/
//
//	//6.对动态开辟内存忘记释放。
//	/*while (1)
//	{
//		malloc(1);
//		Sleep(1000);
//	}*/
//
//	return 0;
//}


//1.
//void GetMemory(char** str)
//{
//	*str = (char*)malloc(100);
//}

//char* GetMemory(char* str)
//{
//	str = (char*)malloc(100);
//	return str;
//}
//
//void test(void)
//{
//	char* p = NULL;
//	//GetMemory(&p);//1.
//	p=GetMemory(p);
//	strcpy(p, "hello world");
//	printf("%s",p);
//	free(p);
//	p = NULL;
//}
//
//int main()
//{
//	test();
//	return 0;
//}


//返回栈空间地址的问题
//char* GetMemory(void)
//{
//	static char p[] = "hello world";//在前面加上static即可解决此类问题
//	//这个数组只能在函数内部使用，声明周期只有在这个函数内
//	//返回的地址p，是已经归还系统的空间。
//	return p;
//}
//
//void test(void)
//{
//	char* str = NULL;
//	str = GetMemory();
//	printf(str);
//}
//
//int main()
//{
//	test();
//
//	return 0;
//}

//int* test()
//{
//	int* ptr = malloc(100);//堆区
//	//堆空间的内存不释放是不会回收的。
//	return ptr;
//}
//
//int main()
//{
//	int* p = test();
//
//	return 0;
//}


//void GetMemory(char** p, int num)
//{
//	*p = (char*)malloc(num);
//}
//
//void test()
//{
//	char* str = NULL;
//	GetMemory(&str, 100);
//	strcpy(str, "hello");
//	printf(str);
//	free(str);
//	str = NULL;
//}
//
//int main()
//{
//	test();
//	return 0;
//}


//void test()
//{
//	char* str = (char*)malloc(100);
//	strcpy(str, "hello");
//	free(str);//free释放str指向的空间后，并不会把str置为NULL
//	str = NULL;
//	if (str != NULL)
//	{
//		strcpy(str, "world");//非法访问内存
//		printf(str);
//	}
//
//}
//
//int main()
//{
//	test();
//	return 0;
//}


//柔性数组

//struct S
//{
//	int n;
//	int arr[];//未知大小--柔性数组成员--数组的大小是可以调整的
//};
//
//int main()
//{
//	//struct S s;
//	struct S* ps =(struct S*) malloc(sizeof(struct S) + 5 * sizeof(int));
//	ps->n = 100;
//	int i = 0;
//	for (i = 0; i < 5; i++)
//	{
//		ps->arr[i] = i;
//	}
//	struct S* ptr = realloc(ps, 44);
//	if (ptr != NULL)
//	{
//		ps = ptr;
//	}
//	for (i = 5; i < 10; i++)
//	{
//		ps->arr[i] = i;
//	}
//	for (i = 0; i < 10; i++)
//	{
//		printf("%d ", ps->arr[i]);
//	}
//	free(ps);
//	ps = NULL;
//	return 0;
//}


//struct S
//{
//	int n;
//	int* arr;
//};
//
//int main()
//{
//	struct S* ps = (struct S*)malloc(sizeof(struct S));
//	ps->arr = malloc(5 * sizeof(int));
//	int i = 0;
//	for (i = 0; i < 5; i++)
//	{
//		*(ps->arr + i) = i;
//	}
//	for (i = 0; i < 5; i++)
//	{
//		printf("%d ", *(ps->arr + i));
//	}
//	//调整大小
//	int* ptr = realloc(ps->arr, 10 * sizeof(int));
//	if (ptr != NULL)
//	{
//		ps->arr = ptr;
//	}
//	for (i = 5; i < 10; i++)
//	{
//		ps->arr[i] = i;
//	}
//	for (i = 0; i < 10; i++)
//	{
//		printf("%d ", *(ps->arr + i));
//	}
//	free(ps->arr);
//	ps->arr = NULL;
//	free(ps);
//	ps = NULL;
//
//	return 0;
//}
//这种方法比柔性数组容易出错
//柔性数组内存连续，访问效率更高。
